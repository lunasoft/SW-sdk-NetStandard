# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - "master"
      - "develop"
      - "hotfix/*"
      - "feature/*"
pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.0'
  inputs:
    version: 6.0.x
    includePreviewVersions: true    
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "##vso[task.setvariable variable=SDKTEST_USER;]$(SDKTEST_USER)"
      Write-Output "##vso[task.setvariable variable=SDKTEST_USER;]$(SDKTEST_USER)"
      Write-Host "env:SDKTEST_USER: $($env:SDKTEST_USER)"
      Write-Output "env:SDKTEST_USER: $($env:SDKTEST_USER)"
      
      Write-Host "##vso[task.setvariable variable=SDKTEST_PASSWORD;]$(SDKTEST_PASSWORD)"
      Write-Output "##vso[task.setvariable variable=SDKTEST_PASSWORD;]$(SDKTEST_PASSWORD)"
      Write-Host "env:SDKTEST_PASSWORD: $($env:SDKTEST_PASSWORD)"
      Write-Output "env:SDKTEST_PASSWORD: $($env:SDKTEST_PASSWORD)"
      
      Write-Host "##vso[task.setvariable variable=SDKTEST_TOKEN;]$(SDKTEST_TOKEN)"
      Write-Output "##vso[task.setvariable variable=SDKTEST_TOKEN;]$(SDKTEST_TOKEN)"
      Write-Host "env:SDKTEST_TOKEN: $($env:SDKTEST_TOKEN)"
      Write-Output "env:SDKTEST_TOKEN: $($env:SDKTEST_TOKEN)"
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: 'SW-sdk-NetStandard.sln'
    feedsToUse: 'config'
    nugetConfigPath: 'NuGet.config'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'SW-sdk-NetStandard.sln'
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'test/sdk-test/sdk-test.csproj'
    publishTestResults: false
    workingDirectory: 'test/sdk-test'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    projects: 'src/sw-sdk/*.csproj'
    custom: 'pack'
    arguments: '-c Release'
  # Run if the trigger was master.
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    projects: 'src/sw-sdk/*.csproj'
    custom: 'pack'
    arguments: '-c Release --version-suffix rc'
  # Run if the trigger was anything but master.
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'src/sw-sdk/bin'
    ArtifactName: 'bin'
    publishLocation: 'Container'
  # Run only if the trigger was master or develop
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
